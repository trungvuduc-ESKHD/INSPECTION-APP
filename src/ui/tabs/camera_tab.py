import streamlit as st
from PIL import Image
from io import BytesIO
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
import zipfile
import datetime
from src.core.supabase_client import upload_file, supabase

# ===================================================================
# H√ÄM T·∫†O B√ÅO C√ÅO WORD CHO M·ªòT S·∫¢N PH·∫®M DUY NH·∫§T
# ===================================================================
def create_single_product_photo_report(product, product_images):
    doc = Document()
    section = doc.sections[0]
    section.left_margin = Inches(0.5)
    section.right_margin = Inches(0.5)
    section.top_margin = Inches(0.5)
    section.bottom_margin = Inches(0.5)
    
    product_name = product.get('name', 'Unknown Product')
    product_size = product.get('size', '')

    # --- Ti√™u ƒë·ªÅ ---
    p = doc.add_paragraph()
    p.add_run('GENERAL PHOTO\n').bold = True
    p.add_run(f'T·ªîNG QUAN V·ªÄ S·∫¢N PH·∫®M/ PRODUCT OVERVIEW\n').bold = True
    p.add_run(f"{product_name} SIZE {product_size}").bold = True
    p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    doc.add_paragraph()

    # --- V·∫Ω c√°c b·∫£ng ·∫£nh ---
    for category, images in product_images.items():
        if not images:
            continue

        p = doc.add_paragraph()
        p.add_run(category.replace('_', ' ').title()).bold = True # Chuy·ªÉn "overview" th√†nh "Overview"

        cols = 2
        rows = (len(images) + 1) // cols
        table = doc.add_table(rows=rows, cols=cols)
        table.style = 'Table Grid'
        
        # Thi·∫øt l·∫≠p chi·ªÅu r·ªông c·ªôt
        for col in table.columns:
            col.width = Inches(3.5)

        # Ch√®n ·∫£nh v√†o c√°c √¥
        img_idx = 0
        for r in range(rows):
            for c in range(cols):
                if img_idx < len(images):
                    try:
                        cell = table.cell(r, c)
                        cell.paragraphs[0].clear()
                        run = cell.paragraphs[0].add_run()
                        run.add_picture(BytesIO(images[img_idx]), width=Inches(3.2))
                        cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                    except Exception as e:
                        print(f"Error adding image to report: {e}")
                    img_idx += 1

        doc.add_paragraph()

    doc_stream = BytesIO()
    doc.save(doc_stream)
    doc_stream.seek(0)
    return doc_stream

def handle_new_photo():
    """
    H√†m n√†y ƒë∆∞·ª£c g·ªçi m·ªói khi st.camera_input c√≥ ·∫£nh m·ªõi.
    N√≥ s·∫Ω l∆∞u ·∫£nh v√† tƒÉng key c·ªßa camera ƒë·ªÉ l√†m m·ªõi widget.
    """
    # L·∫•y th√¥ng tin t·ª´ session state
    product_name = st.session_state.get('camera_current_product')
    category = st.session_state.get('camera_current_category')
    camera_key = st.session_state.get('camera_widget_key') # Key c·ªßa camera_input

    if not product_name or not category or not camera_key:
        return

    # L·∫•y d·ªØ li·ªáu ·∫£nh t·ª´ widget camera th√¥ng qua key c·ªßa n√≥
    img_buffer = st.session_state[camera_key]
    
    if img_buffer:
        # Th√™m ·∫£nh v√†o danh s√°ch
        st.session_state.camera_images[product_name][category].append(img_buffer.getvalue())
        # TƒÉng key c·ªßa camera ƒë·ªÉ "bu·ªôc" n√≥ l√†m m·ªõi cho l·∫ßn ch·ª•p ti·∫øp theo
        st.session_state.camera_key_counter += 1

# ===================================================================
# H√ÄM RENDER CH√çNH C·ª¶A TAB
# ===================================================================
def render_camera_tab():
    st.header("üì∏ Ch·ª•p ·∫£nh b√°o c√°o")

    # Kh·ªüi t·∫°o c√°c bi·∫øn trong session state n·∫øu ch∆∞a c√≥
    if 'camera_images' not in st.session_state:
        st.session_state.camera_images = {}

    if not st.session_state.get('inspection_data') or not st.session_state.inspection_data.get('products'):
        st.warning("‚ö†Ô∏è Vui l√≤ng th√™m s·∫£n ph·∫©m ·ªü tab 'Th√¥ng tin/General' tr∆∞·ªõc.")
        return

    # Giao di·ªán ch·ªçn s·∫£n ph·∫©m v√† danh m·ª•c ·∫£nh
    product_names = [p['name'] for p in st.session_state.inspection_data['products']]
    selected_product_name = st.selectbox("1. Ch·ªçn s·∫£n ph·∫©m", product_names, key="upload_product_selector")

    categories = {
        "Overview": "T·ªïng quan", "Checking_weight": "Ki·ªÉm tra kh·ªëi l∆∞·ª£ng",
        "Checking_size": "Ki·ªÉm tra k√≠ch c·ª°", "Checking_Brix": "Ki·ªÉm tra ƒë·ªô Brix",
        "Checking_Firmness": "Ki·ªÉm tra ƒë·ªô c·ª©ng", "Serious_defects": "L·ªói nghi√™m tr·ªçng",
        "Major_defects": "L·ªói l·ªõn", "Minor_defects": "L·ªói nh·∫π",
        "Shattering_Berries": "Qu·∫£ b·ªã r·ª•ng"
    }
    selected_category = st.selectbox("2. Ch·ªçn danh m·ª•c ·∫£nh", options=list(categories.keys()), format_func=lambda k: categories[k])

    # Kh·ªüi t·∫°o dict l∆∞u ·∫£nh n·∫øu ch∆∞a c√≥
    if selected_product_name not in st.session_state.camera_images:
        st.session_state.camera_images[selected_product_name] = {cat: [] for cat in categories}

    st.markdown("---")
    st.subheader(f"üì§ 3. T·∫£i ·∫£nh ho·∫∑c ch·ª•p ·∫£nh")

    st.info("üìå B·∫°n c√≥ th·ªÉ ch·ªçn nhi·ªÅu ·∫£nh ho·∫∑c ch·ª•p tr·ª±c ti·∫øp b·∫±ng camera (n·∫øu tr√¨nh duy·ªát h·ªó tr·ª£).")
    uploaded_files = st.file_uploader(
        "Nh·∫•n ƒë·ªÉ ch·ªçn ho·∫∑c ch·ª•p ·∫£nh (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)",
        type=["jpg", "jpeg", "png"],
        accept_multiple_files=True,
        key="file_uploader"
    )

    if uploaded_files:
        for uploaded_file in uploaded_files:
            img_bytes = uploaded_file.read()
            st.session_state.camera_images[selected_product_name][selected_category].append(img_bytes)
        st.success(f"‚úÖ ƒê√£ th√™m {len(uploaded_files)} ·∫£nh cho m·ª•c '{categories[selected_category]}'")

    # Hi·ªÉn th·ªã c√°c ·∫£nh ƒë√£ th√™m
    st.markdown("---")
    st.subheader(f"üñºÔ∏è C√°c ·∫£nh ƒë√£ t·∫£i/ch·ª•p cho m·ª•c '{categories[selected_category]}'")

    current_images = st.session_state.camera_images[selected_product_name][selected_category]
    if not current_images:
        st.info("Ch∆∞a c√≥ ·∫£nh n√†o.")
    else:
        cols = st.columns(4)
        for i, img in enumerate(current_images):
            with cols[i % 4]:
                st.image(img, use_container_width=True)
                if st.button(f"‚ùå X√≥a ·∫£nh {i+1}", key=f"del_{selected_product_name}_{selected_category}_{i}"):
                    del current_images[i]
                    st.rerun()


    # --- T·∫†O, UPLOAD V√Ä T·∫¢I B√ÅO C√ÅO (LOGIC M·ªöI) ---
    # ==========================================================
    st.markdown("---")
    st.header("T·∫°o v√† T·∫£i b√°o c√°o")
    st.info("B√°o c√°o s·∫Ω ƒë∆∞·ª£c t·∫°o v√† t·ª± ƒë·ªông l∆∞u tr·ªØ online tr√™n h·ªá th·ªëng.")

    # L·∫•y danh s√°ch s·∫£n ph·∫©m c√≥ ·∫£nh
    products_with_images = []
    all_products = st.session_state.inspection_data.get('products', [])
    for product in all_products:
        if product['name'] in st.session_state.camera_images and any(st.session_state.camera_images[product['name']].values()):
            products_with_images.append(product)

    if not products_with_images:
        st.warning("Ch∆∞a c√≥ ·∫£nh n√†o ƒë∆∞·ª£c ch·ª•p.")
    else:
        for product in products_with_images:
            product_name = product['name']
            
            # --- T·∫°o layout cho m·ªói s·∫£n ph·∫©m ---
            with st.container(border=True):
                st.subheader(f"B√°o c√°o cho: '{product_name}'")
                col1, col2 = st.columns([3, 1])

                with col1:
                    st.write("Nh·∫•n n√∫t ƒë·ªÉ t·∫°o, l∆∞u tr·ªØ online v√† t·∫£i v·ªÅ file b√°o c√°o ·∫£nh.")
                
                with col2:
                    if st.button(f"T·∫°o & L∆∞u B√°o c√°o '{product_name}'", key=f"generate_{product_name}", use_container_width=True, type="primary"):
                        with st.spinner(f"ƒêang x·ª≠ l√Ω cho '{product_name}'..."):
                            
                            # 1. T·∫°o file .docx trong b·ªô nh·ªõ
                            report_stream = create_single_product_photo_report(product, st.session_state.camera_images[product_name])
                            report_bytes = report_stream.getvalue()
                            
                            # 2. Chu·∫©n b·ªã ƒë∆∞·ªùng d·∫´n v√† t√™n file tr√™n Supabase Storage
                            report_id = st.session_state.inspection_data['generalInfo']['report_id']
                            file_name_on_storage = f"{report_id}/{product_name.replace(' ', '_')}_Photo_Report.docx"
                            
                            # 3. Upload file l√™n Supabase
                            public_url = upload_file(
                                bucket_name="reportimages", # T√™n bucket c·ªßa b·∫°n
                                file_path=file_name_on_storage,
                                file_body=report_bytes,
                                file_options={"content-type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document"}
                            )
                            
                            if public_url:
                                st.success(f"ƒê√£ l∆∞u b√°o c√°o l√™n h·ªá th·ªëng th√†nh c√¥ng!")
                                
                                # 4. (T√πy ch·ªçn) C·∫≠p nh·∫≠t URL v√†o CSDL PostgreSQL
                                try:
                                    supabase.table('reports').update({'photo_report_url': public_url}).eq('id', report_id).execute()
                                except Exception as e:
                                    st.warning(f"L∆∞u b√°o c√°o th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ c·∫≠p nh·∫≠t link v√†o CSDL: {e}")

                                # 5. Cung c·∫•p n√∫t t·∫£i xu·ªëng cho ng∆∞·ªùi d√πng
                                st.download_button(
                                    label=f"T·∫£i l·∫°i file '{product_name}'",
                                    data=report_bytes,
                                    file_name=f"Photo_Report_{product_name.replace(' ', '_')}.docx",
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                )
                            else:
                                st.error("C√≥ l·ªói x·∫£y ra khi t·∫£i b√°o c√°o l√™n h·ªá th·ªëng.")
